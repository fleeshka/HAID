import os
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from olama import olama_nlp_generate
import sys
# sys.path.append('/app/src')
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'src'))
from src.api_handler import get_products
from src.recomender import recommend

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Initialize product manager

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /start is issued."""
    user_first_name = update.message.from_user.first_name
    await update.message.reply_text(
        'üëã –ü—Ä–∏–≤–µ—Ç, {user_first_name}! –Ø ‚Äî —Ç–≤–æ–π AI –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º –∏ —Ä–µ—Ü–µ–ø—Ç–∞–º.\n\n'
        '–¢—ã –º–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å:\n'
        '- –ì–¥–µ –¥–µ—à–µ–≤–ª–µ –∫—É–ø–∏—Ç—å [–ø—Ä–æ–¥—É–∫—Ç]\n'
        '- –ß—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∏–∑ [–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞]\n'
        '- –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫: "–•–æ—á—É —Å–¥–µ–ª–∞—Ç—å –±–ª–∏–Ω—ã, –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –∏ —Ö–ª–µ–±"'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /help is issued."""
    await update.message.reply_text(
        'üìå –ö–æ–º–∞–Ω–¥—ã:\n'
        '/start ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n'
        '/help ‚Äî –ø–æ–º–æ—â—å\n\n'
        '–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n'
        '- "–ì–¥–µ –∫—É–ø–∏—Ç—å —Å—ã—Ä?"\n'
        '- "–ß—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∏–∑ –∫–∞—Ä—Ç–æ—à–∫–∏?"\n'
        '- "–•–æ—á—É —Å–¥–µ–ª–∞—Ç—å –±–æ—Ä—â –∏ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ"'
    )

product_to_category = {
    "–º–æ–ª–æ–∫–æ": "–º–æ–ª–æ—á–∫–∞",
    "—Å–º–µ—Ç–∞–Ω–∞": "–º–æ–ª–æ—á–∫–∞",
    "—Ç–≤–æ—Ä–æ–≥": "–º–æ–ª–æ—á–∫–∞",
    "—Å—ã—Ä": "–º–æ–ª–æ—á–∫–∞",
    "—è–π—Ü–∞": "—è–π—Ü–æ",
    "—Ñ–∞—Ä—à": "–º—è—Å–æ",
    "–∞–∑—É": "–º—è—Å–æ",
    "—Ñ–∏–ª–µ": "–ø—Ç–∏—Ü–∞",
    "–ø–µ—á–µ–Ω—å": "–ø—Ç–∏—Ü–∞",
    "–≥—Ä—É–¥–∫–∞": "–ø—Ç–∏—Ü–∞",
    "–∫—Ä—ã–ª—å—è": "–ø—Ç–∏—Ü–∞",
    "–∫–æ–ª–±–∞—Å–∞": "–∫–æ–ª–±–∞—Å–∞",
    "—Ä–∏—Å": "–±–∞–∫–∞–ª–µ—è",
    "–º–∞–∫–∞—Ä–æ–Ω—ã": "–±–∞–∫–∞–ª–µ—è",
    "–≥—Ä–µ—á–∫–∞": "–±–∞–∫–∞–ª–µ—è",
    "–º–∞–π–æ–Ω–µ–∑": "—Å–æ—É—Å—ã",
    "—Å–æ—É—Å": "—Å–æ—É—Å—ã",
    "–∫–µ—Ç—á—É–ø": "—Å–æ—É—Å—ã",
    "–∫–æ—Ñ–µ": "–∫–æ—Ñ–µ –∏ —á–∞–π",
    "—á–∞–π": "–∫–æ—Ñ–µ –∏ —á–∞–π",
    "—Å–∞—Ö–∞—Ä": "—Å–ø–µ—Ü–∏–∏",
    "–∫–∞–∫–∞–æ": "–±–∞–∫–∞–ª–µ—è",
    "—Å–æ–ª—å": "–±–∞–∫–∞–ª–µ—è",
    "—à–æ–∫–æ–ª–∞–¥": "—Å–ª–∞–¥–∫–æ–µ",
    "–ø–µ—á–µ–Ω—å–µ": "—Å–ª–∞–¥–∫–æ–µ",
    "—è–±–ª–æ–∫–∏": "—Ñ—Ä—É–∫—Ç—ã",
    "–±–∞–Ω–∞–Ω—ã": "—Ñ—Ä—É–∫—Ç—ã",
    "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å": "–æ–≤–æ—â–∏",
    "–æ–≥—É—Ä—Ü—ã": "–æ–≤–æ—â–∏",
    "–±–∞—Ç–æ–Ω": "—Ö–ª–µ–±",
    "—Ä–∂–∞–Ω–æ–π —Ö–ª–µ–±": "—Ö–ª–µ–±",
    "–ø–µ–ª—å–º–µ–Ω–∏": "–∑–∞–º–æ—Ä–æ–∑–∫–∞",
    "–æ–≤–æ—â–∏": "–∑–∞–º–æ—Ä–æ–∑–∫–∞",
    "—Å–æ–∫": "–Ω–∞–ø–∏—Ç–∫–∏",
    "–≤–æ–¥–∞": "–Ω–∞–ø–∏—Ç–∫–∏"
}


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle incoming messages and generate responses."""
    try:
        user_message = update.message.text.lower()

        # Use Cohere NLP to extract structured products
        ai_response =await  olama_nlp_generate(user_message)
        # await update.message.reply_text(ai_response)
        extracted_products = []
        for line in ai_response.splitlines():
            if line.lower().startswith("–ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è:"):
                extracted = line.split(":", 1)[1].strip()
                extracted_products = [item.strip() for item in extracted.split(",") if item.strip()]
                break
        if not extracted_products:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return
        all_products = get_products(need_unit_price=True, available=True)
        extracted_categories = []
        unknown_products = []

        for product in extracted_products:
            category = product_to_category.get(product)
            if category:
                extracted_categories.append(category)
            else:
                unknown_products.append(product)

        if unknown_products:
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤: {', '.join(unknown_products)}")

        recommendations = recommend(all_products, extracted_categories)

        response_text = f"{ai_response.strip()}\n\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–≤ —Ü–µ–Ω—ã –≤ –ü—è—Ç–µ—Ä–æ—á–∫–µ –∏ –ú–∞–≥–Ω–∏—Ç–µ, —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Ç–µ–±–µ:\n"
        for category, items in recommendations.items():
            response_text += f"\nüì¶ {category}:\n"
            for item in items:
                response_text += f"‚Ä¢ {item['name']} ‚Äî {item['price']}‚ÇΩ ({item['store']})\n"

        await update.message.reply_text(response_text.strip())



    except Exception as e:
        logger.error(f"Error: {str(e)}")
        await update.message.reply_text(
            " –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def main():
    """Start the bot."""
    token = os.getenv('TELEGRAM_TOKEN')
    if not token:
        raise ValueError(" TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    application = Application.builder().token(token).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.run_polling(allowed_updates=Update.ALL_TYPES)


    
if __name__ == '__main__':
    main()
