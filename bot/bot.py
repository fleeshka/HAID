import os
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import sys
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), '..'))
from src.api_handler import get_products
from src.recomender import recommend
from olama import extract_products_with_ai, recomend_recipies, update_products_with_ai
from redis_client import save_context, get_context, reset_context, set_state, get_state, get_extracted_products, get_provided_recipes
import re


load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def send_image(image_path: str, update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.message:
            with open(image_path, "rb") as image:
                await update.message.reply_photo(photo=image)
        elif update.callback_query:
            with open(image_path, "rb") as image:
                await update.callback_query.message.reply_photo(photo=image)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /start is issued."""
    if update.message is None or update.message.text is None:
        return

    user_first_name = update.message.from_user.first_name
    user_id = update.message.from_user.id
    reset_context(user_id)
    set_state(user_id, "start")
    
    await send_image("bot/img/img3.png", update, context)

    await update.message.reply_text(
        f'üëã –ü—Ä–∏–≤–µ—Ç, {user_first_name}! –Ø ‚Äî —Ç–≤–æ–π AI –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º –∏ —Ä–µ—Ü–µ–ø—Ç–∞–º.\n\n'

        '–¢—ã –º–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å:\n'
        '- –ì–¥–µ –¥–µ—à–µ–≤–ª–µ –∫—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã\n'
        '- –ß—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∏–∑ —Ç–≤–æ–∏—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤\n'
        '- –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫: "–•–æ—á—É —Å–¥–µ–ª–∞—Ç—å –±–ª–∏–Ω—ã, –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –∏ —Ö–ª–µ–±"'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /help is issued."""
    if update.message is None or update.message.text is None:
        return

    await update.message.reply_text(
        'üìå –ö–æ–º–∞–Ω–¥—ã:\n'
        '/start ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n'
        '/help ‚Äî –ø–æ–º–æ—â—å\n\n'
        '–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n'
        '- "–ì–¥–µ –∫—É–ø–∏—Ç—å —Å—ã—Ä?"\n'
        '- "–ß—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∏–∑ –∫–∞—Ä—Ç–æ—à–∫–∏?"\n'
        '- "–•–æ—á—É —Å–¥–µ–ª–∞—Ç—å –±–æ—Ä—â –∏ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ"'
    )

product_to_category = {
    "–º–æ–ª–æ–∫–æ": "–º–æ–ª–æ—á–∫–∞",
    "—Å–º–µ—Ç–∞–Ω–∞": "–º–æ–ª–æ—á–∫–∞",
    "—Ç–≤–æ—Ä–æ–≥": "–º–æ–ª–æ—á–∫–∞",
    "—Å—ã—Ä": "–º–æ–ª–æ—á–∫–∞",
    "—è–π—Ü–∞": "—è–π—Ü–æ",
    "—Ñ–∞—Ä—à": "–º—è—Å–æ",
    "–∞–∑—É": "–º—è—Å–æ",
    "—Ñ–∏–ª–µ": "–ø—Ç–∏—Ü–∞",
    "–ø–µ—á–µ–Ω—å": "–ø—Ç–∏—Ü–∞",
    "–≥—Ä—É–¥–∫–∞": "–ø—Ç–∏—Ü–∞",
    "–∫—Ä—ã–ª—å—è": "–ø—Ç–∏—Ü–∞",
    "–∫–æ–ª–±–∞—Å–∞": "–∫–æ–ª–±–∞—Å–∞",
    "—Ä–∏—Å": "–±–∞–∫–∞–ª–µ—è",
    "–º–∞–∫–∞—Ä–æ–Ω—ã": "–±–∞–∫–∞–ª–µ—è",
    "–≥—Ä–µ—á–∫–∞": "–±–∞–∫–∞–ª–µ—è",
    "–º–∞–π–æ–Ω–µ–∑": "—Å–æ—É—Å—ã",
    "—Å–æ—É—Å": "—Å–æ—É—Å—ã",
    "–∫–µ—Ç—á—É–ø": "—Å–æ—É—Å—ã",
    "–∫–æ—Ñ–µ": "–∫–æ—Ñ–µ –∏ —á–∞–π",
    "—á–∞–π": "–∫–æ—Ñ–µ –∏ —á–∞–π",
    "—Å–∞—Ö–∞—Ä": "—Å–ø–µ—Ü–∏–∏",
    "–∫–∞–∫–∞–æ": "–±–∞–∫–∞–ª–µ—è",
    "—Å–æ–ª—å": "–±–∞–∫–∞–ª–µ—è",
    "—à–æ–∫–æ–ª–∞–¥": "—Å–ª–∞–¥–∫–æ–µ",
    "–ø–µ—á–µ–Ω—å–µ": "—Å–ª–∞–¥–∫–æ–µ",
    "—è–±–ª–æ–∫–∏": "—Ñ—Ä—É–∫—Ç—ã",
    "–±–∞–Ω–∞–Ω—ã": "—Ñ—Ä—É–∫—Ç—ã",
    "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å": "–æ–≤–æ—â–∏",
    "–æ–≥—É—Ä—Ü—ã": "–æ–≤–æ—â–∏",
    "–±–∞—Ç–æ–Ω": "—Ö–ª–µ–±",
    "—Ä–∂–∞–Ω–æ–π —Ö–ª–µ–±": "—Ö–ª–µ–±",
    "–ø–µ–ª—å–º–µ–Ω–∏": "–∑–∞–º–æ—Ä–æ–∑–∫–∞",
    "–æ–≤–æ—â–∏": "–∑–∞–º–æ—Ä–æ–∑–∫–∞",
    "—Å–æ–∫": "–Ω–∞–ø–∏—Ç–∫–∏",
    "–≤–æ–¥–∞": "–Ω–∞–ø–∏—Ç–∫–∏"
}


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.message.from_user.id
        user_message = update.message.text.strip()
        state = get_state(user_id)

        if state == "start":
            save_context(user_id, "from_user", user_message)
            extracted_products = extract_products_with_ai(user_message)
            save_context(user_id, "products_extracted", extracted_products)
            set_state(user_id, "waiting_for_confirmation")

            text = f"–•–æ—Ä–æ—à–æ! –Ø –≤–∏–∂—É, —Ç—ã —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å: {extracted_products}. –í—Å—ë –≤–µ—Ä–Ω–æ?"

            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ", callback_data="confirm_extracted_list")],
                [InlineKeyboardButton("–•–æ—á—É –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="regect_extracted_list")]
            ])
            await update.message.reply_text(text, reply_markup=keyboard)
            return

        elif state == "confirmed":
            provided_recipes = recomend_recipies(get_context(user_id, "products_extracted"))
            await update.message.reply_text(provided_recipes)

            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã", callback_data="add_new")],
                [InlineKeyboardButton("–ù–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–π", callback_data="no_add")]
            ])
            await update.message.reply_text("–•–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å?", reply_markup=keyboard)

            return
        
        elif state == "waiting_for_confirmation":
            if "–¥–∞" in user_message.lower():
                set_state(user_id, "confirmed")
                await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É...") 
            elif "–∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫" in user_message.lower():
                reset_context(user_id)
                set_state(user_id, "start")
                await update.message.reply_text("–•–æ—Ä–æ—à–æ, –æ—Ç–ø—Ä–∞–≤—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞–Ω–æ–≤–æ.")
            else:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏: '–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ' –∏–ª–∏ '–•–æ—á—É –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫'.")
            return

        elif state == "additional":
            if "–Ω–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã" in user_message.lower():
                new_prodcut_list = update_products_with_ai(get_context(user_id, "products_extracted"))
            elif "–Ω–µ –¥–æ–±–∞–≤–ª—è–π" in user_message.lower():
                set_state(user_id, "price")
                await update.message.reply_text("–•–æ—Ä–æ—à–æ –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º.")
            else: 
                await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω—è–ª, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞")
            return

        elif state == "waiting_for_input":
            save_context(user_id, "from_user", user_message)
            extracted_products = extract_products_with_ai(user_message)
            save_context(user_id, "products_extracted", extracted_products)
            set_state(user_id, "waiting_for_confirmation")

            text = f"–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫: {extracted_products}. –í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ?"
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–í—Å–µ –≤–µ—Ä–Ω–æ", callback_data="upd_ok")],
                [InlineKeyboardButton("–ù–µ—Ç, –Ω–µ —Ç–∞–∫", callback_data="no_upd")]
            ])
            await update.message.reply_text(text, reply_markup=keyboard)
            return
          
        elif state == "price":
          extracted_products = get_context(user_id, "products_extracted")
          if not extracted_products:
              await update.message.reply_text("–ö–∞–∂–µ—Ç—Å—è, —Ç–≤–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—É—Å—Ç–æ–π, –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞.")
              return

          all_products = get_products(need_unit_price=True, available=True)
          extracted_categories = []
          unknown_products = []

          for product in extracted_products:
            logger.debug(f"Matching product: {product}")
            category = product_to_category.get(product)
            if category:
                extracted_categories.append(category)
                logger.info(f"Found category for {product}: {category}")
            else:
                unknown_products.append(product)
                logger.warning(f"Unknown product: {product}")

          if unknown_products:
              await update.message.reply_text(
                  f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è: {', '.join(unknown_products)}")

          if extracted_categories:
              await update.message.reply_text(f"–í–∏–∂—É, —Ç—ã —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å: {', '.join(set(extracted_categories))}")

          await update.message.reply_text("–°—Ä–∞–≤–Ω–∏–≤–∞—é —Ü–µ–Ω—ã –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö, —á—Ç–æ–± –Ω–∞–π—Ç–∏ –Ω–∞–∏–ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ–±—è!")
          recommendations = recommend(all_products, extracted_categories, k=2)

          response_text = "\n–†–µ–∫–æ–º–µ–Ω–¥—É—é:\n"
          for category, items in recommendations.items():
              response_text += f"\nüì¶ {category.capitalize()}:\n"
              for item in items:
                  response_text += f"‚Ä¢ {item['product_name_ru']} ({item['product_type']}), {item['quantity']}{item['unit']} ‚Äî {item['price']}‚ÇΩ –≤ –º–∞–≥–∞–∑–∏–Ω–µ {item['store'].capitalize()}\n"

          await update.message.reply_text(response_text.strip())
          return

        else:
            reset_context(user_id)
            set_state(user_id, "start")
            await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞. –ù–∞–ø–∏—à–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.")
            return

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")


async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if query.data == "confirm_extracted_list":
        set_state(user_id, "confirmed")
        products_extracted = get_extracted_products(user_id)
        
        await query.edit_message_text(f"–í–æ—Ç —Ç–≤–æ–π –≥–æ—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫:\n {products_extracted}.")

        await send_image("bot/img/img1.png", update, context)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

        provided_recipes = recomend_recipies(products_extracted)
        save_context(user_id, "provided_recipes", provided_recipes)
        await query.message.reply_text(provided_recipes)

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã", callback_data="add_new")],
            [InlineKeyboardButton("–ù–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–π", callback_data="no_add")]
        ])
        await query.message.reply_text("–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∫–æ—Ä–∑–∏–Ω—É?", reply_markup=keyboard)

    elif query.data == "regect_extracted_list":
        reset_context(user_id)
        set_state(user_id, "start")
        await query.edit_message_reply_markup(reply_markup=None)
        await query.edit_message_text("–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞. –û—Ç–ø—Ä–∞–≤—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞–Ω–æ–≤–æ.")

    elif query.data == "add_new":
        set_state(user_id, "start")
        await send_image("bot/img/img2.png", update, context) 

        products_extracted = get_extracted_products(user_id)
        recipes = get_context(user_id).get("provided_recipes")

        fresh_list = update_products_with_ai(products_extracted, recipes)

        result = "\n‚Ä¢ ".join(products_extracted.split(", ") + fresh_list.split(", "))
        formatted_result = "‚Ä¢ " + result 

        await query.edit_message_text(f"–í–æ—Ç —Ç–≤–æ–π –≥–æ—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫:\n{formatted_result}")

    elif query.data == "no_add":
        set_state(user_id, "start")
        await send_image("bot/img/img2.png", update, context) 

        products_extracted = get_extracted_products(user_id)
        result = "\n‚Ä¢ ".join(products_extracted.split(", "))
        await query.edit_message_text(f"–í–æ—Ç —Ç–≤–æ–π –≥–æ—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫:\n {result}.")


def main():
    """Start the bot."""
    token = os.getenv('TELEGRAM_TOKEN')
    if not token:
        raise ValueError("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    application = Application.builder().token(token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(handle_callback_query))

    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
