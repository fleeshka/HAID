import os
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
# from cohere_nlp import nlp_generate
from olama import extract_products_with_ai, recomend_recipies, update_products_with_ai
from redis_client import save_context, get_context, reset_context, set_state, get_state, get_extracted_products, get_provided_recipes
import re


# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


async def send_image(path, update: Update, context: ContextTypes.DEFAULT_TYPE):
    image_path = path
    with open(image_path, "rb") as image:
        await update.message.reply_photo(photo=image)

        
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /start is issued."""
    image_path = "bot/img/img3.png"  
    with open(image_path, "rb") as image:
        await update.message.reply_photo(photo=image)
    user_first_name = update.message.from_user.first_name
    user_id = update.message.from_user.id
    reset_context(user_id)
    set_state(user_id, "start")
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç, {user_first_name}! –Ø ‚Äî —Ç–≤–æ–π AI –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º –∏ —Ä–µ—Ü–µ–ø—Ç–∞–º.\n\n'
        '–¢—ã –º–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å:\n'
        '- –ì–¥–µ –¥–µ—à–µ–≤–ª–µ –∫—É–ø–∏—Ç—å –ø—Ä–æ—É–¥–∫—Ç—ã\n'
        '- –ß—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∏–∑ —Ç–≤–æ–∏—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤\n'
        '- –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫: "–•–æ—á—É —Å–¥–µ–ª–∞—Ç—å –±–ª–∏–Ω—ã, –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –∏ —Ö–ª–µ–±"'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /help is issued."""
    await update.message.reply_text(
        'üìå –ö–æ–º–∞–Ω–¥—ã:\n'
        '/start ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n'
        '/help ‚Äî –ø–æ–º–æ—â—å\n\n'
        '–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n'
        '- "–ì–¥–µ –∫—É–ø–∏—Ç—å —Å—ã—Ä?"\n'
        '- "–ß—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∏–∑ –∫–∞—Ä—Ç–æ—à–∫–∏?"\n'
        '- "–•–æ—á—É —Å–¥–µ–ª–∞—Ç—å –±–æ—Ä—â –∏ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ"'
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.message.from_user.id
        user_message = update.message.text.strip()
        state = get_state(user_id)

        if state == "start":
            # save first origing message 
            save_context(user_id, "from_user", user_message)
            extracted_products = extract_products_with_ai(user_message)
            # save extracted products
            save_context(user_id, "products_extracted", extracted_products)
            set_state(user_id, "waiting_for_confirmation")

            text = f"–•–æ—Ä–æ—à–æ! –Ø –≤–∏–∂—É, —Ç—ã —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å: {extracted_products}. –í—Å—ë –≤–µ—Ä–Ω–æ?"

            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ", callback_data="confirm_extracted_list")],
                [InlineKeyboardButton("–•–æ—á—É –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="regect_extracted_list")]
            ])
            await update.message.reply_text(text, reply_markup=keyboard)
            return

        elif state == "confirmed":
            provided_recipes = recomend_recipies(get_context(user_id, "products_extracted"))
    

            await update.message.reply_text(provided_recipes)

            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã", callback_data="add_new")],
                [InlineKeyboardButton("–ù–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–π", callback_data="no_add")]
            ])
            await update.message.reply_text("–•–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å?", reply_markup=keyboard)

            return
        
        elif state == "waiting_for_confirmation":
            if "–¥–∞" in user_message.lower():
                set_state(user_id, "confirmed")
                await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É...") 
            elif "–∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫" in user_message.lower():
                reset_context(user_id)
                set_state(user_id, "start")
                await update.message.reply_text("–•–æ—Ä–æ—à–æ, –æ—Ç–ø—Ä–∞–≤—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞–Ω–æ–≤–æ.")
            else:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏: '–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ' –∏–ª–∏ '–•–æ—á—É –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫'.")
            return

        elif state == "additional":
            if "–Ω–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã" in user_message.lower():
                new_prodcut_list = update_products_with_ai(get_context(user_id, "products_extracted"))
            elif "–Ω–µ –¥–æ–±–∞–≤–ª—è–π" in user_message.lower():
                set_state(user_id, "price")
                await update.message.reply_text("–•–æ—Ä–æ—à–æ –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º.")
            else: 
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏: '–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ' –∏–ª–∏ '–•–æ—á—É –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫'.")
            return

        elif state == "waiting_for_input":
            # update product list 
            save_context(user_id, "from_user", user_message)
            extracted_products = extract_products_with_ai(user_message)
            save_context(user_id, "products_extracted", extracted_products)
            set_state(user_id, "waiting_for_confirmation")

            text = f"–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫: {extracted_products}. –í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ?"
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–í—Å–µ –≤–µ—Ä–Ω–æ", callback_data="upd_ok")],
                [InlineKeyboardButton("–ù–µ—Ç, –Ω–µ —Ç–∞–∫", callback_data="no_upd")]
            ])
            await update.message.reply_text(text, reply_markup=keyboard)
            return

        else:
            # unknown state 
            reset_context(user_id)
            set_state(user_id, "start")
            await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞. –ù–∞–ø–∏—à–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.")
            return

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")


async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if query.data == "confirm_extracted_list":
        set_state(user_id, "confirmed")
        products_extracted = get_extracted_products(user_id)
        recepies = get_provided_recipes(user_id)
        await query.edit_message_text(f"–í–æ—Ç —Ç–≤–æ–π –≥–æ—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫:\n {products_extracted}.")

        provided_recipes = recomend_recipies(products_extracted)
        save_context(user_id, "provided_recipes", provided_recipes)
        await query.message.reply_text(provided_recipes)

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã", callback_data="add_new")],
            [InlineKeyboardButton("–ù–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–π", callback_data="no_add")]
        ])
        await query.message.reply_text("–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø—Ä–æ–¥–∫—É—Ç—ã –≤ –∫–æ—Ä–∑–∏–Ω—É?", reply_markup=keyboard)

    elif query.data == "regect_extracted_list":
        reset_context(user_id)
        set_state(user_id, "start")
        await query.edit_message_reply_markup(reply_markup=None)
        await query.edit_message_text("–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞. –û—Ç–ø—Ä–∞–≤—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞–Ω–æ–≤–æ.")

    elif query.data == "add_new":
        set_state(user_id, "additional")

        products_extracted = get_extracted_products(user_id)
        recipes = get_context(user_id).get("provided_recipes")

        fresh_list = update_products_with_ai(products_extracted, recipes)
        result = "\n".join(products_extracted.split(", ") + fresh_list.split(", "))

        await query.edit_message_text(f"–í–æ—Ç —Ç–≤–æ–π –≥–æ—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫:\n {result}.")

    elif query.data == "no_add":
        set_state(user_id, "price")
        await query.edit_message_text("–•–æ—Ä–æ—à–æ,–∫–∞–∫ —Å–∫–∞–∂–µ—à—å, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º")



def main():
    """Start the bot."""
    token = os.getenv('TELEGRAM_TOKEN')
    if not token:
        raise ValueError("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    application = Application.builder().token(token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))

    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND,
        handle_message
    ))
    application.add_handler(CallbackQueryHandler(handle_callback_query))


    application.run_polling(allowed_updates=Update.ALL_TYPES)


    
if __name__ == '__main__':
    main()
