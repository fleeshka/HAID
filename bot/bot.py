import os
import logging
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
# from cohere_nlp import nlp_generate
from olama import extract_products_with_ai, recomend_recipies
from redis_client import save_context, get_context, reset_context, set_state, get_state 
import re


# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /start is issued."""
    user_first_name = update.message.from_user.first_name
    user_id = update.message.from_user.id
    set_state(user_id, "start")
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç, {user_first_name}! –Ø ‚Äî —Ç–≤–æ–π AI –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º –∏ —Ä–µ—Ü–µ–ø—Ç–∞–º.\n\n'
        '–¢—ã –º–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å:\n'
        '- –ì–¥–µ –¥–µ—à–µ–≤–ª–µ –∫—É–ø–∏—Ç—å –ø—Ä–æ—É–¥–∫—Ç—ã\n'
        '- –ß—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∏–∑ —Ç–≤–æ–∏—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤\n'
        '- –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫: "–•–æ—á—É —Å–¥–µ–ª–∞—Ç—å –±–ª–∏–Ω—ã, –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –∏ —Ö–ª–µ–±"'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /help is issued."""
    await update.message.reply_text(
        'üìå –ö–æ–º–∞–Ω–¥—ã:\n'
        '/start ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n'
        '/help ‚Äî –ø–æ–º–æ—â—å\n\n'
        '–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n'
        '- "–ì–¥–µ –∫—É–ø–∏—Ç—å —Å—ã—Ä?"\n'
        '- "–ß—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∏–∑ –∫–∞—Ä—Ç–æ—à–∫–∏?"\n'
        '- "–•–æ—á—É —Å–¥–µ–ª–∞—Ç—å –±–æ—Ä—â –∏ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ"'
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.message.from_user.id
        user_message = update.message.text.strip()
        state = get_state(user_id)

        if state == "start":
            save_context(user_id, "from_user", user_message)
            extracted_products = extract_products_with_ai(user_message)
            save_context(user_id, "products_extracted", extracted_products)
            set_state(user_id, "waiting_for_confirmation")

            text = f"–•–æ—Ä–æ—à–æ! –Ø –≤–∏–∂—É, —Ç—ã —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å: {extracted_products}. –ü—Ä–∞–≤–∏–ª—å–Ω–æ?"
            keyboard = ReplyKeyboardMarkup(
                [["–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ", "–•–æ—á—É –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫"]],
                one_time_keyboard=True,
                resize_keyboard=True
            )
            await update.message.reply_text(text, reply_markup=keyboard)
            return

        elif state == "waiting_for_confirmation":
            if "–¥–∞" in user_message.lower():
                set_state(user_id, "confirmed")
                await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É...")
                
            elif "–∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫" in user_message.lower():
                reset_context(user_id)
                set_state(user_id, "start")
                await update.message.reply_text("–•–æ—Ä–æ—à–æ, –æ—Ç–ø—Ä–∞–≤—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞–Ω–æ–≤–æ.")
            else:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏: '–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ' –∏–ª–∏ '–•–æ—á—É –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫'.")
            return

        elif state == "confirmed":
            provided_recipes = recomend_recipies(get_context(user_id, "products_extracted"))
            await update.message.reply_text(provided_recipes)
            set_state(user_id, "done")
            return

        elif state == "waiting_for_input":
            # update product list 
            save_context(user_id, "from_user", user_message)
            extracted_products = extract_products_with_ai(user_message)
            save_context(user_id, "products_extracted", extracted_products)
            set_state(user_id, "waiting_for_confirmation")

            text = f"–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫: {extracted_products}. –í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ?"
            keyboard = ReplyKeyboardMarkup(
                [["–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ", "–•–æ—á—É –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫"]],
                one_time_keyboard=True,
                resize_keyboard=True
            )
            await update.message.reply_text(text, reply_markup=keyboard)
            return

        else:
            # unknown state 
            reset_context(user_id)
            set_state(user_id, "start")
            await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞. –ù–∞–ø–∏—à–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.")
            return

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")



def main():
    """Start the bot."""
    token = os.getenv('TELEGRAM_TOKEN')
    if not token:
        raise ValueError("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    application = Application.builder().token(token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))

    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND,
        handle_message
    ))

    application.run_polling(allowed_updates=Update.ALL_TYPES)


    
if __name__ == '__main__':
    main()
