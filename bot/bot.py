import os
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
# from cohere_nlp import nlp_generate
from olama import olama_nlp_generate


# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Initialize product manager

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /start is issued."""
    user_first_name = update.message.from_user.first_name
    await update.message.reply_text(
        'üëã –ü—Ä–∏–≤–µ—Ç, {user_first_name}! –Ø ‚Äî —Ç–≤–æ–π AI –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º –∏ —Ä–µ—Ü–µ–ø—Ç–∞–º.\n\n'
        '–¢—ã –º–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å:\n'
        '- –ì–¥–µ –¥–µ—à–µ–≤–ª–µ –∫—É–ø–∏—Ç—å [–ø—Ä–æ–¥—É–∫—Ç]\n'
        '- –ß—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∏–∑ [–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞]\n'
        '- –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫: "–•–æ—á—É —Å–¥–µ–ª–∞—Ç—å –±–ª–∏–Ω—ã, –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –∏ —Ö–ª–µ–±"'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /help is issued."""
    await update.message.reply_text(
        'üìå –ö–æ–º–∞–Ω–¥—ã:\n'
        '/start ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n'
        '/help ‚Äî –ø–æ–º–æ—â—å\n\n'
        '–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n'
        '- "–ì–¥–µ –∫—É–ø–∏—Ç—å —Å—ã—Ä?"\n'
        '- "–ß—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∏–∑ –∫–∞—Ä—Ç–æ—à–∫–∏?"\n'
        '- "–•–æ—á—É —Å–¥–µ–ª–∞—Ç—å –±–æ—Ä—â –∏ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ"'
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle incoming messages and generate responses."""
    try:
        user_message = update.message.text.lower()

        # Use Cohere NLP to extract structured products
        ai_response = olama_nlp_generate(user_message)
        await update.message.reply_text(ai_response)

    except Exception as e:
        logger.error(f"Error: {str(e)}")
        await update.message.reply_text(
            " –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def main():
    """Start the bot."""
    token = os.getenv('TELEGRAM_TOKEN')
    if not token:
        raise ValueError(" TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    application = Application.builder().token(token).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.run_polling(allowed_updates=Update.ALL_TYPES)


    
if __name__ == '__main__':
    main()
