import requests

OLLAMA_API = "http://ollama:11434/api/chat"

def extract_products_with_ai(message: str) -> str:
    prompt = (
        "Ты — интеллектуальный помощник покупателя. Пользователь прислал сообщение, "
        "в котором могут быть:\n"
        "- список продуктов,\n"
        "- описание блюда, которое он хочет приготовить.\n"

        "Твоя задача:\n"
        "1. Извлеки **только съедобные продукты** (еда, напитки, специи, ингредиенты). Исключи всё несъедобное: бытовую химию, лекарства, упаковки, посуду, витамины, корм для животных.\n"
        "2. Если продукт упоминается, но он явно не предназначен для еды (например, шампунь с экстрактом фруктов), игнорируй его.\n"
        "3. Удали всё лишнее. Верни **ТОЛЬКО** названия съедобных продуктов, через запятую, без дополнительных описаний или текста. Пример: 'яблоки, молоко, картошка, помидоры'.\n"
        f"Не добавляй ничего, кроме списка продуктов. Пользователь прислал: {message}."
    )
    response = olama_nlp_generate(prompt)
    return response

def recomend_recipies(message: str) -> str:
    prompt = (
        "Ты — умный помощник по кулинарии. Пользователь прислал список продуктов. "
        "Твоя задача — предложить блюдо, которое можно приготовить из этих продуктов, "
        "и указать, какие продукты необходимо докупить для каждого блюда.\n\n"
        
        "Ответи кратко и дружелюбно:\n"
        "- Сначала предложи блюдо, которое можно сделать из указанных продуктов.\n"
        "- Затем, выдели продукты, которые не хватает, чтобы приготовить это блюдо.\n\n"
        
        "Используй следующий формат:\n"
        "Блюдо: краткое описание блюда\n"
        "Для этого блюда нужно докупить: [список недостающих продуктов]\n\n"
        
        "Пример: Если в списке есть картошка, морковь, мясо, предложи рецепт борща или картофельного пюре и укажи, что нужно купить для этих блюд.\n\n"
        
        f"Пользователь прислал: {message}."
    )
    response = olama_nlp_generate(prompt)
    return response


def update_products_with_ai(user_products: str, missing_products: str) -> str:
    prompt = (
        "Ты — помощник по продуктам. Пользователь прислал два списка:\n"
        f"1. Текущий список продуктов: {user_products}\n"
        f"2. Недостающие продукты из рецепта: {missing_products}\n\n"
        "Твоя задача:\n"
        "- Объединить два списка в один\n"
        "- Удалить дубликаты\n"
        "- Исключить несъедобные товары (бытовая химия, лекарства, посуда и т.д.)\n"
        "- Вернуть ТОЛЬКО названия съедобных продуктов через запятую, без вступлений, пояснений или лишнего текста.\n"
        "Формат ответа: продукт1, продукт2, продукт3"
    )

    response = olama_nlp_generate(prompt)
    return response.strip()


def olama_nlp_generate(prompt, temperature=0.7, max_tokens=400):
#     system_prompt = (
#     "Ты — помощник по покупкам и кулинарии. Пользователь прислал сообщение со списком покупок или названием блюда.\n\n"
#     "Твоя задача:\n"
#     "1. Извлеки из сообщения только **съедобные продукты**. Игнорируй бытовую химию, упаковку, лекарства, корм для животных.\n"
#     "2. Если указано блюдо (например, борщ, пицца, паста) — добавь недостающие **ингредиенты**, необходимые для его приготовления.\n"
#     "3. Продукты пиши в нормальной форме (именительный падеж, единственное число): «лук», «помидоры», «яйцо».\n"
#     "4. Не повторяй уже указанные продукты.\n"
#     "5. Укажи, какие продукты добавлены и для какого блюда, коротко: «для борща — капуста, свекла».\n"
#     "6. Формат ответа:\n"
#     "   Продукты из сообщения: <...>\n"
#     "   Добавлено: <...>\n"
#     "   Причина: <...>\n\n"
#     f"Сообщение пользователя: {prompt.strip()}"
# )
    

    system_prompt = (
        "Ты — интеллектуальный помощник покупателя и кулинара. Пользователь прислал сообщение, "
        "в котором может быть:\n"
        "- список покупок (еду и не еду вперемешку),\n"
        "- описание блюда, которое он хочет приготовить,\n"
        "- обе вещи сразу или в свободной форме.\n\n"

        "Твоя задача:\n"
        "1. Извлеки **только съедобные продукты** (еда, напитки, специи, ингредиенты). Исключи всё несъедобное: бытовую химию, лекарства, упаковки, посуду, витамины, корм для животных.\n"
        "Если в товаре упоминаются продукты, но он явно не предназначен для еды (например, шампунь с экстрактом фруктов), игнорируй его."

        "2. Если пользователь упомянул название блюда, определи, какие ингредиенты **обычно требуются для его приготовления**, и добавь их (только если их нет в исходном сообщении).\n"
        "3. Распознавай **неформальные слова и опечатки** — «картошечка» = «картофель», «молочка» = «молоко», «курочка» = «курица».\n"
        "Если в запросе есть несколько частей, например, «купи хлеб, если он для салата», сначала выдели продукты и определись, для какого блюда они нужны."
        "Учитывай разные виды блюд: если это готовое блюдо, полуфабрикаты, закуски, десерты или напитки — корректно добавляй ингредиенты для каждого типа."

        "4. Приводи продукты в нормальной форме (именительный падеж, единственное число, если можно).\n"
        "5. Не дублируй продукты.\n"
        "6. Форматируй результат строго по шаблону:\n\n"
        "Продукты из сообщения: <список через запятую>\n"
        "Добавлено: <добавленные продукты>\n"
        "Причина: <для какого блюда добавлено и что именно>\n\n"
        "Если пользователь не совсем точно сформулировал запрос, постарайся понять, о каких продуктах или блюде идет речь. Например, если сказано «картошка для супа», добавь картошку в список и предложи ингредиенты для супа."
        "Понимай синонимы, диалекты и возможные опечатки. Например: «помидоры» и «помидорчики» — это одно и то же, а также «сир» вместо «сыр» или «лук» вместо «луковица»."


        "Если блюдо указано, но неизвестно, просто скажи 'блюдо не распознано'. "
        "Если добавлять нечего — напиши 'Добавлено: —' и 'Причина: —'"
        f"Сообщение пользователя: {prompt.strip()}"
    )




    payload = {
        "model": "llama3:instruct",  
        "messages": [
            {"role": "user", "content": prompt}
        ],
        "temperature": temperature,
        "max_tokens": max_tokens,
        "stream": False
    }

    try:
        response = requests.post(OLLAMA_API, json=payload)
        return response.json()["message"]["content"]
    except requests.exceptions.RequestException as e:
        print(f"Ошибка при запросе к Ollama API: {e}")
        return f"Ошибка при запросе к Ollama API: {e} \n\n Sorry, I encountered an error while processing your request."
